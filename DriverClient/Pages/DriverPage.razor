@page "/driverpage"
@using Pig_n_Go.BLL.Driver
@using DriverClient.Tools
@using Pig_n_Go.Common.Driver
@using Pig_n_Go.Common.Order
@using System.Runtime.Versioning
@inject HttpClient _http
@inject IDriverRequestService _requestService

@if (_driverStatus == DriverStatus.LoggedOut) {
    <h3>Register</h3>
    <p/>
    <EditForm Model="@_driverInfo" OnValidSubmit="@Register">
        <DataAnnotationsValidator />
        <ValidationSummary />
    
        <InputText id="name" @bind-Value="_driverInfo.Name" />
        <p/>
        <InputText id="surname" @bind-Value="_driverInfo.Surname" />
        <p/>
        <button type="submit">Register</button>
    </EditForm>
    
    <p/>
    <h4>or</h4>
    <p/>
    <h3>Login with ID</h3>
    <EditForm Model="@_driverGuidStringMapper" OnValidSubmit="@Login">
        <InputText @bind-Value="_driverGuidStringMapper.StringGuid"/>
        <button type="submit">Login</button>
    </EditForm>
}

@if (_driverStatus == DriverStatus.LoggedIn) {
    <h3>Hello, @_driverDto.DriverInfo.Name!</h3>
    <p/>
    <h4>Your location: @_currentLocation.Abscissa, @_currentLocation.Ordinate</h4>
    <EditForm Model="_currentLocation" OnValidSubmit="@UpdateLocation">
        <InputNumber id="abscissa" @bind-Value="_currentLocation.Abscissa"></InputNumber>
        <InputNumber id="ordinate" @bind-Value="_currentLocation.Ordinate"></InputNumber>
        <button type="submit">Update location</button>
    </EditForm>
    <p/>

    <h4>Available orders:</h4>
    <table class="table">
        <tr>
            <th>Order ID</th>
            <th>Start</th>
            <th>Finish</th>
        </tr>
        @foreach (OrderDto order in _orders) {
            <tr>
                <td>@order.Id</td>
                <td>@order.Route.LocationUnits.First().Abscissa, @order.Route.LocationUnits.First().Ordinate</td>
                <td>@order.Route.LocationUnits.Last().Abscissa, @order.Route.LocationUnits.Last().Ordinate</td>
            </tr>
        }
    </table> 
    <p/>
    <h4>Choose order:</h4>
    <EditForm Model="@_orderGuidStringMapper" OnSubmit="AcceptOrder">
        <InputText id="orderGuid" @bind-Value="_orderGuidStringMapper.StringGuid"/>
        <p/>
        <button type="submit">Accept order</button>
    </EditForm>  
}

@if (_driverStatus == DriverStatus.Driving) {
    <h3>You're driving right now!</h3>
    <h4>Route start: @_currentOrder.Route.LocationUnits.First().Abscissa, 
        @_currentOrder.Route.LocationUnits.First().Ordinate</h4>
    <h4>Route finish: @_currentOrder.Route.LocationUnits.Last().Abscissa, 
        @_currentOrder.Route.LocationUnits.Last().Ordinate</h4>
    <button @onClick="FinishOrder">Finish order</button>
}

@code {
    private DriverDto _driverDto;
    private DriverInfo _driverInfo = new DriverInfo();
    DriverStatus _driverStatus = DriverStatus.LoggedOut;

    private List<OrderDto> _orders = new List<OrderDto>();
    private GuidStringMapper _driverGuidStringMapper = new GuidStringMapper();

    private CartesianLocationUnitDto _currentLocation = new CartesianLocationUnitDto();
    private GuidStringMapper _orderGuidStringMapper = new GuidStringMapper();
    private OrderDto _currentOrder;

    private async Task Register() {
        _driverDto = await _requestService.Register(_driverInfo);
        _driverStatus = DriverStatus.LoggedIn;
    }

    private async Task Login() {
        _driverDto = await _requestService.Login(_driverGuidStringMapper.Id);
        _driverStatus = DriverStatus.LoggedIn;
    }

    private async Task UpdateLocation() {
        // TODO get orders
    }

    private async Task AcceptOrder() {
        _currentOrder = await _requestService.AcceptOrder(_driverDto.Id, _orderGuidStringMapper.Id);
        _driverStatus = DriverStatus.Driving;
    }

    private async Task FinishOrder() {
        await _requestService.FinishOrder(_currentOrder.Id);
        _currentOrder = null;
        _driverStatus = DriverStatus.LoggedIn;
    }
}